// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for GetKeyParamsShowSecretKey.
const (
	False GetKeyParamsShowSecretKey = "false"
	True  GetKeyParamsShowSecretKey = "true"
)

// BucketInfo defines model for BucketInfo.
type BucketInfo struct {
	Bytes         *int64           `json:"bytes,omitempty"`
	GlobalAliases *[]string        `json:"globalAliases,omitempty"`
	Id            *string          `json:"id,omitempty"`
	Keys          *[]BucketKeyInfo `json:"keys,omitempty"`
	Objects       *int64           `json:"objects,omitempty"`
	Quotas        *struct {
		MaxObjects *int64 `json:"maxObjects"`
		MaxSize    *int64 `json:"maxSize"`
	} `json:"quotas,omitempty"`
	UnfinishedUploads *int  `json:"unfinishedUploads,omitempty"`
	WebsiteAccess     *bool `json:"websiteAccess,omitempty"`
	WebsiteConfig     *struct {
		ErrorDocument *string `json:"errorDocument,omitempty"`
		IndexDocument *string `json:"indexDocument,omitempty"`
	} `json:"websiteConfig"`
}

// BucketKeyInfo defines model for BucketKeyInfo.
type BucketKeyInfo struct {
	AccessKeyId        *string   `json:"accessKeyId,omitempty"`
	BucketLocalAliases *[]string `json:"bucketLocalAliases,omitempty"`
	Name               *string   `json:"name,omitempty"`
	Permissions        *struct {
		Owner *bool `json:"owner,omitempty"`
		Read  *bool `json:"read,omitempty"`
		Write *bool `json:"write,omitempty"`
	} `json:"permissions,omitempty"`
}

// ClusterLayout defines model for ClusterLayout.
type ClusterLayout struct {
	Roles             []NodeClusterInfo `json:"roles"`
	StagedRoleChanges []NodeRoleChange  `json:"stagedRoleChanges"`
	Version           int               `json:"version"`
}

// KeyInfo defines model for KeyInfo.
type KeyInfo struct {
	AccessKeyId *string `json:"accessKeyId,omitempty"`
	Buckets     *[]struct {
		GlobalAliases *[]string `json:"globalAliases,omitempty"`
		Id            *string   `json:"id,omitempty"`
		LocalAliases  *[]string `json:"localAliases,omitempty"`
		Permissions   *struct {
			Owner *bool `json:"owner,omitempty"`
			Read  *bool `json:"read,omitempty"`
			Write *bool `json:"write,omitempty"`
		} `json:"permissions,omitempty"`
	} `json:"buckets,omitempty"`
	Name        *string `json:"name,omitempty"`
	Permissions *struct {
		CreateBucket *bool `json:"createBucket,omitempty"`
	} `json:"permissions,omitempty"`
	SecretAccessKey *string `json:"secretAccessKey"`
}

// LayoutVersion defines model for LayoutVersion.
type LayoutVersion struct {
	Version int `json:"version"`
}

// NodeClusterInfo defines model for NodeClusterInfo.
type NodeClusterInfo struct {
	Capacity *int64 `json:"capacity"`

	// Tags User defined tags, put whatever makes sense for you, these tags are not interpreted by Garage
	Tags []string `json:"tags"`
	Zone string   `json:"zone"`
}

// NodeNetworkInfo defines model for NodeNetworkInfo.
type NodeNetworkInfo struct {
	Addr            string  `json:"addr"`
	Hostname        string  `json:"hostname"`
	Id              *string `json:"id,omitempty"`
	IsUp            bool    `json:"isUp"`
	LastSeenSecsAgo *int    `json:"lastSeenSecsAgo"`
}

// NodeRoleChange defines model for NodeRoleChange.
type NodeRoleChange struct {
	union json.RawMessage
}

// NodeRoleRemove defines model for NodeRoleRemove.
type NodeRoleRemove struct {
	Id     string `json:"id"`
	Remove bool   `json:"remove"`
}

// NodeRoleUpdate defines model for NodeRoleUpdate.
type NodeRoleUpdate struct {
	Capacity *int64   `json:"capacity"`
	Id       string   `json:"id"`
	Tags     []string `json:"tags"`
	Zone     string   `json:"zone"`
}

// DeleteBucketParams defines parameters for DeleteBucket.
type DeleteBucketParams struct {
	// Id The exact bucket identifier, a 32 bytes hexadecimal string
	Id string `form:"id" json:"id"`
}

// GetBucketInfoParams defines parameters for GetBucketInfo.
type GetBucketInfoParams struct {
	// Id The exact bucket identifier, a 32 bytes hexadecimal string.
	//
	// Incompatible with `alias`.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Alias The exact global alias of one of the existing buckets.
	//
	// Incompatible with `id`.
	Alias *string `form:"alias,omitempty" json:"alias,omitempty"`
}

// CreateBucketJSONBody defines parameters for CreateBucket.
type CreateBucketJSONBody struct {
	GlobalAlias *string `json:"globalAlias,omitempty"`
	LocalAlias  *struct {
		AccessKeyId *string `json:"accessKeyId,omitempty"`
		Alias       *string `json:"alias,omitempty"`
		Allow       *struct {
			Owner *bool `json:"owner,omitempty"`
			Read  *bool `json:"read,omitempty"`
			Write *bool `json:"write,omitempty"`
		} `json:"allow,omitempty"`
	} `json:"localAlias,omitempty"`
}

// UpdateBucketJSONBody defines parameters for UpdateBucket.
type UpdateBucketJSONBody struct {
	Quotas *struct {
		MaxObjects *int64 `json:"maxObjects"`
		MaxSize    *int64 `json:"maxSize"`
	} `json:"quotas,omitempty"`
	WebsiteAccess *struct {
		Enabled       *bool   `json:"enabled,omitempty"`
		ErrorDocument *string `json:"errorDocument,omitempty"`
		IndexDocument *string `json:"indexDocument,omitempty"`
	} `json:"websiteAccess,omitempty"`
}

// UpdateBucketParams defines parameters for UpdateBucket.
type UpdateBucketParams struct {
	// Id The exact bucket identifier, a 32 bytes hexadecimal string
	Id string `form:"id" json:"id"`
}

// DeleteBucketGlobalAliasParams defines parameters for DeleteBucketGlobalAlias.
type DeleteBucketGlobalAliasParams struct {
	Id    string `form:"id" json:"id"`
	Alias string `form:"alias" json:"alias"`
}

// PutBucketGlobalAliasParams defines parameters for PutBucketGlobalAlias.
type PutBucketGlobalAliasParams struct {
	Id    string `form:"id" json:"id"`
	Alias string `form:"alias" json:"alias"`
}

// DeleteBucketLocalAliasParams defines parameters for DeleteBucketLocalAlias.
type DeleteBucketLocalAliasParams struct {
	Id          string `form:"id" json:"id"`
	AccessKeyId string `form:"accessKeyId" json:"accessKeyId"`
	Alias       string `form:"alias" json:"alias"`
}

// PutBucketLocalAliasParams defines parameters for PutBucketLocalAlias.
type PutBucketLocalAliasParams struct {
	Id          string `form:"id" json:"id"`
	AccessKeyId string `form:"accessKeyId" json:"accessKeyId"`
	Alias       string `form:"alias" json:"alias"`
}

// AllowBucketKeyJSONBody defines parameters for AllowBucketKey.
type AllowBucketKeyJSONBody struct {
	AccessKeyId string `json:"accessKeyId"`
	BucketId    string `json:"bucketId"`
	Permissions struct {
		Owner bool `json:"owner"`
		Read  bool `json:"read"`
		Write bool `json:"write"`
	} `json:"permissions"`
}

// DenyBucketKeyJSONBody defines parameters for DenyBucketKey.
type DenyBucketKeyJSONBody struct {
	AccessKeyId string `json:"accessKeyId"`
	BucketId    string `json:"bucketId"`
	Permissions struct {
		Owner bool `json:"owner"`
		Read  bool `json:"read"`
		Write bool `json:"write"`
	} `json:"permissions"`
}

// AddNodeJSONBody defines parameters for AddNode.
type AddNodeJSONBody = []string

// DeleteKeyParams defines parameters for DeleteKey.
type DeleteKeyParams struct {
	// Id The exact API access key generated by Garage
	Id string `form:"id" json:"id"`
}

// GetKeyParams defines parameters for GetKey.
type GetKeyParams struct {
	// Id The exact API access key generated by Garage.
	//
	// Incompatible with `search`.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Search A pattern (beginning or full string) corresponding to a key identifier or friendly name.
	//
	// Incompatible with `id`.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// ShowSecretKey Wether or not the secret key should be returned in the response
	ShowSecretKey *GetKeyParamsShowSecretKey `form:"showSecretKey,omitempty" json:"showSecretKey,omitempty"`
}

// GetKeyParamsShowSecretKey defines parameters for GetKey.
type GetKeyParamsShowSecretKey string

// UpdateKeyJSONBody defines parameters for UpdateKey.
type UpdateKeyJSONBody struct {
	Allow *struct {
		CreateBucket *bool `json:"createBucket,omitempty"`
	} `json:"allow,omitempty"`
	Deny *struct {
		CreateBucket *bool `json:"createBucket,omitempty"`
	} `json:"deny,omitempty"`
	Name *string `json:"name,omitempty"`
}

// UpdateKeyParams defines parameters for UpdateKey.
type UpdateKeyParams struct {
	// Id The exact API access key generated by Garage
	Id string `form:"id" json:"id"`
}

// ImportKeyJSONBody defines parameters for ImportKey.
type ImportKeyJSONBody struct {
	AccessKeyId     string  `json:"accessKeyId"`
	Name            *string `json:"name"`
	SecretAccessKey string  `json:"secretAccessKey"`
}

// AddKeyJSONBody defines parameters for AddKey.
type AddKeyJSONBody struct {
	Name *string `json:"name"`
}

// AddLayoutJSONBody defines parameters for AddLayout.
type AddLayoutJSONBody = []NodeRoleChange

// CreateBucketJSONRequestBody defines body for CreateBucket for application/json ContentType.
type CreateBucketJSONRequestBody CreateBucketJSONBody

// UpdateBucketJSONRequestBody defines body for UpdateBucket for application/json ContentType.
type UpdateBucketJSONRequestBody UpdateBucketJSONBody

// AllowBucketKeyJSONRequestBody defines body for AllowBucketKey for application/json ContentType.
type AllowBucketKeyJSONRequestBody AllowBucketKeyJSONBody

// DenyBucketKeyJSONRequestBody defines body for DenyBucketKey for application/json ContentType.
type DenyBucketKeyJSONRequestBody DenyBucketKeyJSONBody

// AddNodeJSONRequestBody defines body for AddNode for application/json ContentType.
type AddNodeJSONRequestBody = AddNodeJSONBody

// UpdateKeyJSONRequestBody defines body for UpdateKey for application/json ContentType.
type UpdateKeyJSONRequestBody UpdateKeyJSONBody

// ImportKeyJSONRequestBody defines body for ImportKey for application/json ContentType.
type ImportKeyJSONRequestBody ImportKeyJSONBody

// AddKeyJSONRequestBody defines body for AddKey for application/json ContentType.
type AddKeyJSONRequestBody AddKeyJSONBody

// AddLayoutJSONRequestBody defines body for AddLayout for application/json ContentType.
type AddLayoutJSONRequestBody = AddLayoutJSONBody

// ApplyLayoutJSONRequestBody defines body for ApplyLayout for application/json ContentType.
type ApplyLayoutJSONRequestBody = LayoutVersion

// RevertLayoutJSONRequestBody defines body for RevertLayout for application/json ContentType.
type RevertLayoutJSONRequestBody = LayoutVersion

// AsNodeRoleRemove returns the union data inside the NodeRoleChange as a NodeRoleRemove
func (t NodeRoleChange) AsNodeRoleRemove() (NodeRoleRemove, error) {
	var body NodeRoleRemove
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeRoleRemove overwrites any union data inside the NodeRoleChange as the provided NodeRoleRemove
func (t *NodeRoleChange) FromNodeRoleRemove(v NodeRoleRemove) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeRoleRemove performs a merge with any union data inside the NodeRoleChange, using the provided NodeRoleRemove
func (t *NodeRoleChange) MergeNodeRoleRemove(v NodeRoleRemove) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeRoleUpdate returns the union data inside the NodeRoleChange as a NodeRoleUpdate
func (t NodeRoleChange) AsNodeRoleUpdate() (NodeRoleUpdate, error) {
	var body NodeRoleUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeRoleUpdate overwrites any union data inside the NodeRoleChange as the provided NodeRoleUpdate
func (t *NodeRoleChange) FromNodeRoleUpdate(v NodeRoleUpdate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeRoleUpdate performs a merge with any union data inside the NodeRoleChange, using the provided NodeRoleUpdate
func (t *NodeRoleChange) MergeNodeRoleUpdate(v NodeRoleUpdate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeRoleChange) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeRoleChange) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteBucket request
	DeleteBucket(ctx context.Context, params *DeleteBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBucketInfo request
	GetBucketInfo(ctx context.Context, params *GetBucketInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBucketWithBody request with any body
	CreateBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBucket(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBucketWithBody request with any body
	UpdateBucketWithBody(ctx context.Context, params *UpdateBucketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBucket(ctx context.Context, params *UpdateBucketParams, body UpdateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBucketGlobalAlias request
	DeleteBucketGlobalAlias(ctx context.Context, params *DeleteBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBucketGlobalAlias request
	PutBucketGlobalAlias(ctx context.Context, params *PutBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBucketLocalAlias request
	DeleteBucketLocalAlias(ctx context.Context, params *DeleteBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBucketLocalAlias request
	PutBucketLocalAlias(ctx context.Context, params *PutBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllowBucketKeyWithBody request with any body
	AllowBucketKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AllowBucketKey(ctx context.Context, body AllowBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DenyBucketKeyWithBody request with any body
	DenyBucketKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DenyBucketKey(ctx context.Context, body DenyBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBuckets request
	ListBuckets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNodeWithBody request with any body
	AddNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNode(ctx context.Context, body AddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKey request
	DeleteKey(ctx context.Context, params *DeleteKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKey request
	GetKey(ctx context.Context, params *GetKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateKeyWithBody request with any body
	UpdateKeyWithBody(ctx context.Context, params *UpdateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateKey(ctx context.Context, params *UpdateKeyParams, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportKeyWithBody request with any body
	ImportKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportKey(ctx context.Context, body ImportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListKeys request
	ListKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddKeyWithBody request with any body
	AddKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddKey(ctx context.Context, body AddKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLayout request
	GetLayout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddLayoutWithBody request with any body
	AddLayoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddLayout(ctx context.Context, body AddLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplyLayoutWithBody request with any body
	ApplyLayoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplyLayout(ctx context.Context, body ApplyLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevertLayoutWithBody request with any body
	RevertLayoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RevertLayout(ctx context.Context, body RevertLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodes request
	GetNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteBucket(ctx context.Context, params *DeleteBucketParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBucketInfo(ctx context.Context, params *GetBucketInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBucketInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBucketWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBucketRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBucket(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBucketRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBucketWithBody(ctx context.Context, params *UpdateBucketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBucketRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBucket(ctx context.Context, params *UpdateBucketParams, body UpdateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBucketRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBucketGlobalAlias(ctx context.Context, params *DeleteBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketGlobalAliasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBucketGlobalAlias(ctx context.Context, params *PutBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBucketGlobalAliasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBucketLocalAlias(ctx context.Context, params *DeleteBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketLocalAliasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBucketLocalAlias(ctx context.Context, params *PutBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBucketLocalAliasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllowBucketKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllowBucketKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllowBucketKey(ctx context.Context, body AllowBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllowBucketKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DenyBucketKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDenyBucketKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DenyBucketKey(ctx context.Context, body DenyBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDenyBucketKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBuckets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBucketsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNode(ctx context.Context, body AddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKey(ctx context.Context, params *DeleteKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKey(ctx context.Context, params *GetKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKeyWithBody(ctx context.Context, params *UpdateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKeyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKey(ctx context.Context, params *UpdateKeyParams, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKeyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportKey(ctx context.Context, body ImportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddKey(ctx context.Context, body AddKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLayout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLayoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddLayoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLayoutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddLayout(ctx context.Context, body AddLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddLayoutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyLayoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyLayoutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyLayout(ctx context.Context, body ApplyLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyLayoutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevertLayoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevertLayoutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevertLayout(ctx context.Context, body RevertLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevertLayoutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteBucketRequest generates requests for DeleteBucket
func NewDeleteBucketRequest(server string, params *DeleteBucketParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBucketInfoRequest generates requests for GetBucketInfo
func NewGetBucketInfoRequest(server string, params *GetBucketInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Alias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alias", runtime.ParamLocationQuery, *params.Alias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBucketRequest calls the generic CreateBucket builder with application/json body
func NewCreateBucketRequest(server string, body CreateBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBucketRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBucketRequestWithBody generates requests for CreateBucket with any type of body
func NewCreateBucketRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateBucketRequest calls the generic UpdateBucket builder with application/json body
func NewUpdateBucketRequest(server string, params *UpdateBucketParams, body UpdateBucketJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBucketRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateBucketRequestWithBody generates requests for UpdateBucket with any type of body
func NewUpdateBucketRequestWithBody(server string, params *UpdateBucketParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBucketGlobalAliasRequest generates requests for DeleteBucketGlobalAlias
func NewDeleteBucketGlobalAliasRequest(server string, params *DeleteBucketGlobalAliasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket/alias/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alias", runtime.ParamLocationQuery, params.Alias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBucketGlobalAliasRequest generates requests for PutBucketGlobalAlias
func NewPutBucketGlobalAliasRequest(server string, params *PutBucketGlobalAliasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket/alias/global")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alias", runtime.ParamLocationQuery, params.Alias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBucketLocalAliasRequest generates requests for DeleteBucketLocalAlias
func NewDeleteBucketLocalAliasRequest(server string, params *DeleteBucketLocalAliasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket/alias/local")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accessKeyId", runtime.ParamLocationQuery, params.AccessKeyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alias", runtime.ParamLocationQuery, params.Alias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBucketLocalAliasRequest generates requests for PutBucketLocalAlias
func NewPutBucketLocalAliasRequest(server string, params *PutBucketLocalAliasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket/alias/local")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accessKeyId", runtime.ParamLocationQuery, params.AccessKeyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alias", runtime.ParamLocationQuery, params.Alias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllowBucketKeyRequest calls the generic AllowBucketKey builder with application/json body
func NewAllowBucketKeyRequest(server string, body AllowBucketKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAllowBucketKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewAllowBucketKeyRequestWithBody generates requests for AllowBucketKey with any type of body
func NewAllowBucketKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket/allow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDenyBucketKeyRequest calls the generic DenyBucketKey builder with application/json body
func NewDenyBucketKeyRequest(server string, body DenyBucketKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDenyBucketKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewDenyBucketKeyRequestWithBody generates requests for DenyBucketKey with any type of body
func NewDenyBucketKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket/deny")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBucketsRequest generates requests for ListBuckets
func NewListBucketsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bucket?list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddNodeRequest calls the generic AddNode builder with application/json body
func NewAddNodeRequest(server string, body AddNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNodeRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNodeRequestWithBody generates requests for AddNode with any type of body
func NewAddNodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteKeyRequest generates requests for DeleteKey
func NewDeleteKeyRequest(server string, params *DeleteKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKeyRequest generates requests for GetKey
func NewGetKeyRequest(server string, params *GetKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowSecretKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showSecretKey", runtime.ParamLocationQuery, *params.ShowSecretKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateKeyRequest calls the generic UpdateKey builder with application/json body
func NewUpdateKeyRequest(server string, params *UpdateKeyParams, body UpdateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateKeyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdateKeyRequestWithBody generates requests for UpdateKey with any type of body
func NewUpdateKeyRequestWithBody(server string, params *UpdateKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportKeyRequest calls the generic ImportKey builder with application/json body
func NewImportKeyRequest(server string, body ImportKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewImportKeyRequestWithBody generates requests for ImportKey with any type of body
func NewImportKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListKeysRequest generates requests for ListKeys
func NewListKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key?list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddKeyRequest calls the generic AddKey builder with application/json body
func NewAddKeyRequest(server string, body AddKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewAddKeyRequestWithBody generates requests for AddKey with any type of body
func NewAddKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key?list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLayoutRequest generates requests for GetLayout
func NewGetLayoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/layout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddLayoutRequest calls the generic AddLayout builder with application/json body
func NewAddLayoutRequest(server string, body AddLayoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddLayoutRequestWithBody(server, "application/json", bodyReader)
}

// NewAddLayoutRequestWithBody generates requests for AddLayout with any type of body
func NewAddLayoutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/layout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplyLayoutRequest calls the generic ApplyLayout builder with application/json body
func NewApplyLayoutRequest(server string, body ApplyLayoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplyLayoutRequestWithBody(server, "application/json", bodyReader)
}

// NewApplyLayoutRequestWithBody generates requests for ApplyLayout with any type of body
func NewApplyLayoutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/layout/apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRevertLayoutRequest calls the generic RevertLayout builder with application/json body
func NewRevertLayoutRequest(server string, body RevertLayoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRevertLayoutRequestWithBody(server, "application/json", bodyReader)
}

// NewRevertLayoutRequestWithBody generates requests for RevertLayout with any type of body
func NewRevertLayoutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/layout/revert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNodesRequest generates requests for GetNodes
func NewGetNodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteBucketWithResponse request
	DeleteBucketWithResponse(ctx context.Context, params *DeleteBucketParams, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error)

	// GetBucketInfoWithResponse request
	GetBucketInfoWithResponse(ctx context.Context, params *GetBucketInfoParams, reqEditors ...RequestEditorFn) (*GetBucketInfoResponse, error)

	// CreateBucketWithBodyWithResponse request with any body
	CreateBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error)

	CreateBucketWithResponse(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error)

	// UpdateBucketWithBodyWithResponse request with any body
	UpdateBucketWithBodyWithResponse(ctx context.Context, params *UpdateBucketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBucketResponse, error)

	UpdateBucketWithResponse(ctx context.Context, params *UpdateBucketParams, body UpdateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBucketResponse, error)

	// DeleteBucketGlobalAliasWithResponse request
	DeleteBucketGlobalAliasWithResponse(ctx context.Context, params *DeleteBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*DeleteBucketGlobalAliasResponse, error)

	// PutBucketGlobalAliasWithResponse request
	PutBucketGlobalAliasWithResponse(ctx context.Context, params *PutBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*PutBucketGlobalAliasResponse, error)

	// DeleteBucketLocalAliasWithResponse request
	DeleteBucketLocalAliasWithResponse(ctx context.Context, params *DeleteBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*DeleteBucketLocalAliasResponse, error)

	// PutBucketLocalAliasWithResponse request
	PutBucketLocalAliasWithResponse(ctx context.Context, params *PutBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*PutBucketLocalAliasResponse, error)

	// AllowBucketKeyWithBodyWithResponse request with any body
	AllowBucketKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllowBucketKeyResponse, error)

	AllowBucketKeyWithResponse(ctx context.Context, body AllowBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AllowBucketKeyResponse, error)

	// DenyBucketKeyWithBodyWithResponse request with any body
	DenyBucketKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DenyBucketKeyResponse, error)

	DenyBucketKeyWithResponse(ctx context.Context, body DenyBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DenyBucketKeyResponse, error)

	// ListBucketsWithResponse request
	ListBucketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBucketsResponse, error)

	// AddNodeWithBodyWithResponse request with any body
	AddNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNodeResponse, error)

	AddNodeWithResponse(ctx context.Context, body AddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNodeResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// DeleteKeyWithResponse request
	DeleteKeyWithResponse(ctx context.Context, params *DeleteKeyParams, reqEditors ...RequestEditorFn) (*DeleteKeyResponse, error)

	// GetKeyWithResponse request
	GetKeyWithResponse(ctx context.Context, params *GetKeyParams, reqEditors ...RequestEditorFn) (*GetKeyResponse, error)

	// UpdateKeyWithBodyWithResponse request with any body
	UpdateKeyWithBodyWithResponse(ctx context.Context, params *UpdateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyResponse, error)

	UpdateKeyWithResponse(ctx context.Context, params *UpdateKeyParams, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKeyResponse, error)

	// ImportKeyWithBodyWithResponse request with any body
	ImportKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportKeyResponse, error)

	ImportKeyWithResponse(ctx context.Context, body ImportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportKeyResponse, error)

	// ListKeysWithResponse request
	ListKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListKeysResponse, error)

	// AddKeyWithBodyWithResponse request with any body
	AddKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddKeyResponse, error)

	AddKeyWithResponse(ctx context.Context, body AddKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddKeyResponse, error)

	// GetLayoutWithResponse request
	GetLayoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLayoutResponse, error)

	// AddLayoutWithBodyWithResponse request with any body
	AddLayoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLayoutResponse, error)

	AddLayoutWithResponse(ctx context.Context, body AddLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLayoutResponse, error)

	// ApplyLayoutWithBodyWithResponse request with any body
	ApplyLayoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyLayoutResponse, error)

	ApplyLayoutWithResponse(ctx context.Context, body ApplyLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyLayoutResponse, error)

	// RevertLayoutWithBodyWithResponse request with any body
	RevertLayoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RevertLayoutResponse, error)

	RevertLayoutWithResponse(ctx context.Context, body RevertLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*RevertLayoutResponse, error)

	// GetNodesWithResponse request
	GetNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesResponse, error)
}

type DeleteBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBucketInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r GetBucketInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBucketInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r CreateBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r UpdateBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBucketGlobalAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r DeleteBucketGlobalAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBucketGlobalAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBucketGlobalAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r PutBucketGlobalAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBucketGlobalAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBucketLocalAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r DeleteBucketLocalAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBucketLocalAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBucketLocalAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r PutBucketLocalAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBucketLocalAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllowBucketKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r AllowBucketKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllowBucketKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DenyBucketKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketInfo
}

// Status returns HTTPResponse.Status
func (r DenyBucketKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DenyBucketKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		GlobalAliases *[]string `json:"globalAliases,omitempty"`
		Id            string    `json:"id"`
		LocalAliases  *[]struct {
			AccessKeyId string `json:"accessKeyId"`
			Alias       string `json:"alias"`
		} `json:"localAliases,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Error   *string `json:"error"`
		Success *bool   `json:"success,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ConnectedNodes   int64  `json:"connectedNodes"`
		KnownNodes       int64  `json:"knownNodes"`
		Partitions       int64  `json:"partitions"`
		PartitionsAllOk  int64  `json:"partitionsAllOk"`
		PartitionsQuorum int64  `json:"partitionsQuorum"`
		Status           string `json:"status"`
		StorageNodes     int64  `json:"storageNodes"`
		StorageNodesOk   int64  `json:"storageNodesOk"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeyInfo
}

// Status returns HTTPResponse.Status
func (r GetKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeyInfo
}

// Status returns HTTPResponse.Status
func (r UpdateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeyInfo
}

// Status returns HTTPResponse.Status
func (r ImportKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id   string  `json:"id"`
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeyInfo
}

// Status returns HTTPResponse.Status
func (r AddKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterLayout
}

// Status returns HTTPResponse.Status
func (r GetLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterLayout
}

// Status returns HTTPResponse.Status
func (r AddLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Layout  ClusterLayout `json:"layout"`
		Message []string      `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ApplyLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevertLayoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RevertLayoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevertLayoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DbEngine       string            `json:"dbEngine"`
		GarageFeatures []string          `json:"garageFeatures"`
		GarageVersion  string            `json:"garageVersion"`
		KnownNodes     []NodeNetworkInfo `json:"knownNodes"`
		Layout         ClusterLayout     `json:"layout"`
		Node           string            `json:"node"`
		RustVersion    string            `json:"rustVersion"`
	}
}

// Status returns HTTPResponse.Status
func (r GetNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteBucketWithResponse request returning *DeleteBucketResponse
func (c *ClientWithResponses) DeleteBucketWithResponse(ctx context.Context, params *DeleteBucketParams, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error) {
	rsp, err := c.DeleteBucket(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketResponse(rsp)
}

// GetBucketInfoWithResponse request returning *GetBucketInfoResponse
func (c *ClientWithResponses) GetBucketInfoWithResponse(ctx context.Context, params *GetBucketInfoParams, reqEditors ...RequestEditorFn) (*GetBucketInfoResponse, error) {
	rsp, err := c.GetBucketInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBucketInfoResponse(rsp)
}

// CreateBucketWithBodyWithResponse request with arbitrary body returning *CreateBucketResponse
func (c *ClientWithResponses) CreateBucketWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error) {
	rsp, err := c.CreateBucketWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBucketResponse(rsp)
}

func (c *ClientWithResponses) CreateBucketWithResponse(ctx context.Context, body CreateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error) {
	rsp, err := c.CreateBucket(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBucketResponse(rsp)
}

// UpdateBucketWithBodyWithResponse request with arbitrary body returning *UpdateBucketResponse
func (c *ClientWithResponses) UpdateBucketWithBodyWithResponse(ctx context.Context, params *UpdateBucketParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBucketResponse, error) {
	rsp, err := c.UpdateBucketWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBucketResponse(rsp)
}

func (c *ClientWithResponses) UpdateBucketWithResponse(ctx context.Context, params *UpdateBucketParams, body UpdateBucketJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBucketResponse, error) {
	rsp, err := c.UpdateBucket(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBucketResponse(rsp)
}

// DeleteBucketGlobalAliasWithResponse request returning *DeleteBucketGlobalAliasResponse
func (c *ClientWithResponses) DeleteBucketGlobalAliasWithResponse(ctx context.Context, params *DeleteBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*DeleteBucketGlobalAliasResponse, error) {
	rsp, err := c.DeleteBucketGlobalAlias(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketGlobalAliasResponse(rsp)
}

// PutBucketGlobalAliasWithResponse request returning *PutBucketGlobalAliasResponse
func (c *ClientWithResponses) PutBucketGlobalAliasWithResponse(ctx context.Context, params *PutBucketGlobalAliasParams, reqEditors ...RequestEditorFn) (*PutBucketGlobalAliasResponse, error) {
	rsp, err := c.PutBucketGlobalAlias(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBucketGlobalAliasResponse(rsp)
}

// DeleteBucketLocalAliasWithResponse request returning *DeleteBucketLocalAliasResponse
func (c *ClientWithResponses) DeleteBucketLocalAliasWithResponse(ctx context.Context, params *DeleteBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*DeleteBucketLocalAliasResponse, error) {
	rsp, err := c.DeleteBucketLocalAlias(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketLocalAliasResponse(rsp)
}

// PutBucketLocalAliasWithResponse request returning *PutBucketLocalAliasResponse
func (c *ClientWithResponses) PutBucketLocalAliasWithResponse(ctx context.Context, params *PutBucketLocalAliasParams, reqEditors ...RequestEditorFn) (*PutBucketLocalAliasResponse, error) {
	rsp, err := c.PutBucketLocalAlias(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBucketLocalAliasResponse(rsp)
}

// AllowBucketKeyWithBodyWithResponse request with arbitrary body returning *AllowBucketKeyResponse
func (c *ClientWithResponses) AllowBucketKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllowBucketKeyResponse, error) {
	rsp, err := c.AllowBucketKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllowBucketKeyResponse(rsp)
}

func (c *ClientWithResponses) AllowBucketKeyWithResponse(ctx context.Context, body AllowBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AllowBucketKeyResponse, error) {
	rsp, err := c.AllowBucketKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllowBucketKeyResponse(rsp)
}

// DenyBucketKeyWithBodyWithResponse request with arbitrary body returning *DenyBucketKeyResponse
func (c *ClientWithResponses) DenyBucketKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DenyBucketKeyResponse, error) {
	rsp, err := c.DenyBucketKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDenyBucketKeyResponse(rsp)
}

func (c *ClientWithResponses) DenyBucketKeyWithResponse(ctx context.Context, body DenyBucketKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DenyBucketKeyResponse, error) {
	rsp, err := c.DenyBucketKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDenyBucketKeyResponse(rsp)
}

// ListBucketsWithResponse request returning *ListBucketsResponse
func (c *ClientWithResponses) ListBucketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBucketsResponse, error) {
	rsp, err := c.ListBuckets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBucketsResponse(rsp)
}

// AddNodeWithBodyWithResponse request with arbitrary body returning *AddNodeResponse
func (c *ClientWithResponses) AddNodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNodeResponse, error) {
	rsp, err := c.AddNodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNodeResponse(rsp)
}

func (c *ClientWithResponses) AddNodeWithResponse(ctx context.Context, body AddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNodeResponse, error) {
	rsp, err := c.AddNode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNodeResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// DeleteKeyWithResponse request returning *DeleteKeyResponse
func (c *ClientWithResponses) DeleteKeyWithResponse(ctx context.Context, params *DeleteKeyParams, reqEditors ...RequestEditorFn) (*DeleteKeyResponse, error) {
	rsp, err := c.DeleteKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeyResponse(rsp)
}

// GetKeyWithResponse request returning *GetKeyResponse
func (c *ClientWithResponses) GetKeyWithResponse(ctx context.Context, params *GetKeyParams, reqEditors ...RequestEditorFn) (*GetKeyResponse, error) {
	rsp, err := c.GetKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeyResponse(rsp)
}

// UpdateKeyWithBodyWithResponse request with arbitrary body returning *UpdateKeyResponse
func (c *ClientWithResponses) UpdateKeyWithBodyWithResponse(ctx context.Context, params *UpdateKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyResponse, error) {
	rsp, err := c.UpdateKeyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeyResponse(rsp)
}

func (c *ClientWithResponses) UpdateKeyWithResponse(ctx context.Context, params *UpdateKeyParams, body UpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKeyResponse, error) {
	rsp, err := c.UpdateKey(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeyResponse(rsp)
}

// ImportKeyWithBodyWithResponse request with arbitrary body returning *ImportKeyResponse
func (c *ClientWithResponses) ImportKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportKeyResponse, error) {
	rsp, err := c.ImportKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportKeyResponse(rsp)
}

func (c *ClientWithResponses) ImportKeyWithResponse(ctx context.Context, body ImportKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportKeyResponse, error) {
	rsp, err := c.ImportKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportKeyResponse(rsp)
}

// ListKeysWithResponse request returning *ListKeysResponse
func (c *ClientWithResponses) ListKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListKeysResponse, error) {
	rsp, err := c.ListKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListKeysResponse(rsp)
}

// AddKeyWithBodyWithResponse request with arbitrary body returning *AddKeyResponse
func (c *ClientWithResponses) AddKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddKeyResponse, error) {
	rsp, err := c.AddKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddKeyResponse(rsp)
}

func (c *ClientWithResponses) AddKeyWithResponse(ctx context.Context, body AddKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddKeyResponse, error) {
	rsp, err := c.AddKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddKeyResponse(rsp)
}

// GetLayoutWithResponse request returning *GetLayoutResponse
func (c *ClientWithResponses) GetLayoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLayoutResponse, error) {
	rsp, err := c.GetLayout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLayoutResponse(rsp)
}

// AddLayoutWithBodyWithResponse request with arbitrary body returning *AddLayoutResponse
func (c *ClientWithResponses) AddLayoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddLayoutResponse, error) {
	rsp, err := c.AddLayoutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLayoutResponse(rsp)
}

func (c *ClientWithResponses) AddLayoutWithResponse(ctx context.Context, body AddLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*AddLayoutResponse, error) {
	rsp, err := c.AddLayout(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddLayoutResponse(rsp)
}

// ApplyLayoutWithBodyWithResponse request with arbitrary body returning *ApplyLayoutResponse
func (c *ClientWithResponses) ApplyLayoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyLayoutResponse, error) {
	rsp, err := c.ApplyLayoutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyLayoutResponse(rsp)
}

func (c *ClientWithResponses) ApplyLayoutWithResponse(ctx context.Context, body ApplyLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyLayoutResponse, error) {
	rsp, err := c.ApplyLayout(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyLayoutResponse(rsp)
}

// RevertLayoutWithBodyWithResponse request with arbitrary body returning *RevertLayoutResponse
func (c *ClientWithResponses) RevertLayoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RevertLayoutResponse, error) {
	rsp, err := c.RevertLayoutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevertLayoutResponse(rsp)
}

func (c *ClientWithResponses) RevertLayoutWithResponse(ctx context.Context, body RevertLayoutJSONRequestBody, reqEditors ...RequestEditorFn) (*RevertLayoutResponse, error) {
	rsp, err := c.RevertLayout(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevertLayoutResponse(rsp)
}

// GetNodesWithResponse request returning *GetNodesResponse
func (c *ClientWithResponses) GetNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesResponse, error) {
	rsp, err := c.GetNodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodesResponse(rsp)
}

// ParseDeleteBucketResponse parses an HTTP response from a DeleteBucketWithResponse call
func ParseDeleteBucketResponse(rsp *http.Response) (*DeleteBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBucketInfoResponse parses an HTTP response from a GetBucketInfoWithResponse call
func ParseGetBucketInfoResponse(rsp *http.Response) (*GetBucketInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBucketInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBucketResponse parses an HTTP response from a CreateBucketWithResponse call
func ParseCreateBucketResponse(rsp *http.Response) (*CreateBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateBucketResponse parses an HTTP response from a UpdateBucketWithResponse call
func ParseUpdateBucketResponse(rsp *http.Response) (*UpdateBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBucketGlobalAliasResponse parses an HTTP response from a DeleteBucketGlobalAliasWithResponse call
func ParseDeleteBucketGlobalAliasResponse(rsp *http.Response) (*DeleteBucketGlobalAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBucketGlobalAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBucketGlobalAliasResponse parses an HTTP response from a PutBucketGlobalAliasWithResponse call
func ParsePutBucketGlobalAliasResponse(rsp *http.Response) (*PutBucketGlobalAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBucketGlobalAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBucketLocalAliasResponse parses an HTTP response from a DeleteBucketLocalAliasWithResponse call
func ParseDeleteBucketLocalAliasResponse(rsp *http.Response) (*DeleteBucketLocalAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBucketLocalAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBucketLocalAliasResponse parses an HTTP response from a PutBucketLocalAliasWithResponse call
func ParsePutBucketLocalAliasResponse(rsp *http.Response) (*PutBucketLocalAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBucketLocalAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAllowBucketKeyResponse parses an HTTP response from a AllowBucketKeyWithResponse call
func ParseAllowBucketKeyResponse(rsp *http.Response) (*AllowBucketKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllowBucketKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDenyBucketKeyResponse parses an HTTP response from a DenyBucketKeyWithResponse call
func ParseDenyBucketKeyResponse(rsp *http.Response) (*DenyBucketKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DenyBucketKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBucketsResponse parses an HTTP response from a ListBucketsWithResponse call
func ParseListBucketsResponse(rsp *http.Response) (*ListBucketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			GlobalAliases *[]string `json:"globalAliases,omitempty"`
			Id            string    `json:"id"`
			LocalAliases  *[]struct {
				AccessKeyId string `json:"accessKeyId"`
				Alias       string `json:"alias"`
			} `json:"localAliases,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddNodeResponse parses an HTTP response from a AddNodeWithResponse call
func ParseAddNodeResponse(rsp *http.Response) (*AddNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Error   *string `json:"error"`
			Success *bool   `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ConnectedNodes   int64  `json:"connectedNodes"`
			KnownNodes       int64  `json:"knownNodes"`
			Partitions       int64  `json:"partitions"`
			PartitionsAllOk  int64  `json:"partitionsAllOk"`
			PartitionsQuorum int64  `json:"partitionsQuorum"`
			Status           string `json:"status"`
			StorageNodes     int64  `json:"storageNodes"`
			StorageNodesOk   int64  `json:"storageNodesOk"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteKeyResponse parses an HTTP response from a DeleteKeyWithResponse call
func ParseDeleteKeyResponse(rsp *http.Response) (*DeleteKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetKeyResponse parses an HTTP response from a GetKeyWithResponse call
func ParseGetKeyResponse(rsp *http.Response) (*GetKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeyInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateKeyResponse parses an HTTP response from a UpdateKeyWithResponse call
func ParseUpdateKeyResponse(rsp *http.Response) (*UpdateKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeyInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportKeyResponse parses an HTTP response from a ImportKeyWithResponse call
func ParseImportKeyResponse(rsp *http.Response) (*ImportKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeyInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListKeysResponse parses an HTTP response from a ListKeysWithResponse call
func ParseListKeysResponse(rsp *http.Response) (*ListKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id   string  `json:"id"`
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddKeyResponse parses an HTTP response from a AddKeyWithResponse call
func ParseAddKeyResponse(rsp *http.Response) (*AddKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeyInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLayoutResponse parses an HTTP response from a GetLayoutWithResponse call
func ParseGetLayoutResponse(rsp *http.Response) (*GetLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterLayout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddLayoutResponse parses an HTTP response from a AddLayoutWithResponse call
func ParseAddLayoutResponse(rsp *http.Response) (*AddLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterLayout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplyLayoutResponse parses an HTTP response from a ApplyLayoutWithResponse call
func ParseApplyLayoutResponse(rsp *http.Response) (*ApplyLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplyLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Layout  ClusterLayout `json:"layout"`
			Message []string      `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevertLayoutResponse parses an HTTP response from a RevertLayoutWithResponse call
func ParseRevertLayoutResponse(rsp *http.Response) (*RevertLayoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevertLayoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNodesResponse parses an HTTP response from a GetNodesWithResponse call
func ParseGetNodesResponse(rsp *http.Response) (*GetNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DbEngine       string            `json:"dbEngine"`
			GarageFeatures []string          `json:"garageFeatures"`
			GarageVersion  string            `json:"garageVersion"`
			KnownNodes     []NodeNetworkInfo `json:"knownNodes"`
			Layout         ClusterLayout     `json:"layout"`
			Node           string            `json:"node"`
			RustVersion    string            `json:"rustVersion"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
